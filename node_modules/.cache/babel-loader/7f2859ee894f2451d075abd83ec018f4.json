{"ast":null,"code":"var _jsxFileName = \"/Users/dustinhuth/coding/redux-tutorial/learn-redux2/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nconst store = createStore(isL); //React VVVVVVV\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n/*  Note from overview --- ...this code went after import {createStore} line and before ReactDOM.render.\n//Create STORE -> globalized state\n\n//ACTION -> give it a name that represents what you want the action to do (ex: increment).  Action is a function that returns an object\n\nconst increment = () => {\n\n    return{\n        type:'INCREMENT'\n    }\n}\n\nconst decrement = () => {\n\n    return{\n        type:'DECREMENT'\n    }\n}\n\n//REDUCER -> updates the STORE\n\nconst counter = (state = 0, action) => {\n    switch(action.type ){\n        case \"INCREMENT\":\n            return state + 1\n        case \"DECREMENT\":\n            return state -1\n        default:\n            console.log(`no reducer case set up for action.type: ${action.type}`)\n    }\n}\nlet store = createStore(counter)\n\n//display it in the console  --> just for development...not part of the functionality\nstore.subscribe(() => console.log(store.getState()))\n\n\n//DISPATCH - sends action to Reducer\nstore.dispatch(increment())\n\n*/","map":{"version":3,"sources":["/Users/dustinhuth/coding/redux-tutorial/learn-redux2/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","store","isL","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,WAAR,QAA2B,OAA3B;AAEA,MAAMC,KAAK,GAAGD,WAAW,CAACE,GAAD,CAAzB,C,CACA;;AAEAL,QAAQ,CAACM,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAN,aAAa,CAACO,UAAd;AAEA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore } from 'redux'\n\nconst store = createStore(isL)\n//React VVVVVVV\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/*  Note from overview --- ...this code went after import {createStore} line and before ReactDOM.render.\n//Create STORE -> globalized state\n\n//ACTION -> give it a name that represents what you want the action to do (ex: increment).  Action is a function that returns an object\n\nconst increment = () => {\n\n    return{\n        type:'INCREMENT'\n    }\n}\n\nconst decrement = () => {\n\n    return{\n        type:'DECREMENT'\n    }\n}\n\n//REDUCER -> updates the STORE\n\nconst counter = (state = 0, action) => {\n    switch(action.type ){\n        case \"INCREMENT\":\n            return state + 1\n        case \"DECREMENT\":\n            return state -1\n        default:\n            console.log(`no reducer case set up for action.type: ${action.type}`)\n    }\n}\nlet store = createStore(counter)\n\n//display it in the console  --> just for development...not part of the functionality\nstore.subscribe(() => console.log(store.getState()))\n\n\n//DISPATCH - sends action to Reducer\nstore.dispatch(increment())\n\n*/"]},"metadata":{},"sourceType":"module"}